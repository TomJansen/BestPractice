/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : bpFSM.sm
 */

 
/*
** Copyright (C) 2010 Robert Moerland
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation version 2.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/



#include "../gui/bpmainframe.h"
#include "bpFSM.h"

using namespace statemap;

namespace bestpractice
{
    // Static class declarations.
    File_Paused File::Paused("File::Paused", 0);
    File_Playing File::Playing("File::Playing", 1);
    File_Stopped File::Stopped("File::Stopped", 2);

    void BpMainFrameState::Eof(bpFSM& context)
    {
        Default(context);
        return;
    }

    void BpMainFrameState::NewFile(bpFSM& context, wxString filename)
    {
        Default(context);
        return;
    }

    void BpMainFrameState::Next(bpFSM& context)
    {
        Default(context);
        return;
    }

    void BpMainFrameState::PlayPause(bpFSM& context)
    {
        Default(context);
        return;
    }

    void BpMainFrameState::Previous(bpFSM& context)
    {
        Default(context);
        return;
    }

    void BpMainFrameState::Stop(bpFSM& context)
    {
        Default(context);
        return;
    }

    void BpMainFrameState::Default(bpFSM& context)
    {
        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void File_Default::Next(bpFSM& context)
    {
        BpMainFrame& ctxt(context.getOwner());

        if ( !ctxt.NextAudioFileAvailable() )
        {
            // No actions.
        }
        else if ( ctxt.NextAudioFileAvailable() && ctxt.InitializeAudioStreamFromFile( ctxt.GetNextAudioFileName() ) )
    
    {
            // No actions.
        }        else
        {
             File_Default::Next(context);
        }

        return;
    }

    void File_Default::Previous(bpFSM& context)
    {
        BpMainFrame& ctxt(context.getOwner());

        if ( !ctxt.PreviousAudioFileAvailable() )
        {
            // No actions.
        }
        else if ( ctxt.PreviousAudioFileAvailable() && ctxt.InitializeAudioStreamFromFile( ctxt.GetPreviousAudioFileName() ) )
    
    {
            // No actions.
        }        else
        {
             File_Default::Previous(context);
        }

        return;
    }

    void File_Default::NewFile(bpFSM& context, wxString filename)
    {
        BpMainFrame& ctxt(context.getOwner());

        if ( ctxt.InitializeAudioStreamFromFile( filename ) )
        {
            // No actions.
        }
        else
        {
            (context.getState()).Exit(context);
            context.setState(File::Stopped);
            (context.getState()).Entry(context);
        }

        return;
    }

    void File_Default::Stop(bpFSM& context)
    {

        (context.getState()).Exit(context);
        context.setState(File::Stopped);
        (context.getState()).Entry(context);

        return;
    }

    void File_Default::Eof(bpFSM& context)
    {

        (context.getState()).Exit(context);
        context.setState(File::Stopped);
        (context.getState()).Entry(context);

        return;
    }

    void File_Paused::Entry(bpFSM& context)

{
        BpMainFrame& ctxt(context.getOwner());

        ctxt.PauseStream();
        return;
    }

    void File_Paused::PlayPause(bpFSM& context)
    {

        (context.getState()).Exit(context);
        context.setState(File::Playing);
        (context.getState()).Entry(context);

        return;
    }

    void File_Playing::Entry(bpFSM& context)

{
        BpMainFrame& ctxt(context.getOwner());

        ctxt.ContinueStream();
        return;
    }

    void File_Playing::Next(bpFSM& context)
    {
        BpMainFrame& ctxt(context.getOwner());

        if ( !ctxt.NextAudioFileAvailable() )
        {
            // No actions.
        }
        else if ( ctxt.NextAudioFileAvailable() && ctxt.InitializeAudioStreamFromFile( ctxt.GetNextAudioFileName() ) )
    
    {
            BpMainFrameState& endState = context.getState();

            context.clearState();
            try
            {
                ctxt.ContinueStream();
                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             File_Default::Next(context);
        }

        return;
    }

    void File_Playing::PlayPause(bpFSM& context)
    {

        (context.getState()).Exit(context);
        context.setState(File::Paused);
        (context.getState()).Entry(context);

        return;
    }

    void File_Playing::Previous(bpFSM& context)
    {
        BpMainFrame& ctxt(context.getOwner());

        if ( !ctxt.PreviousAudioFileAvailable() )
        {
            // No actions.
        }
        else if ( ctxt.PreviousAudioFileAvailable() && ctxt.InitializeAudioStreamFromFile( ctxt.GetPreviousAudioFileName() ) )
    
    {
            (context.getState()).Exit(context);
            // No actions.
            context.setState(File::Playing);
            (context.getState()).Entry(context);
        }        else
        {
             File_Default::Previous(context);
        }

        return;
    }

    void File_Stopped::Entry(bpFSM& context)

{
        BpMainFrame& ctxt(context.getOwner());

        ctxt.UninitializeAudioStream();
        return;
    }

    void File_Stopped::NewFile(bpFSM& context, wxString filename)
    {
        BpMainFrame& ctxt(context.getOwner());

        if ( ctxt.InitializeAudioStreamFromFile( filename ) )
        {
            (context.getState()).Exit(context);
            // No actions.
            context.setState(File::Playing);
            (context.getState()).Entry(context);
        }
        else
        {
             File_Default::NewFile(context, filename);
        }

        return;
    }

    void File_Stopped::Next(bpFSM& context)
    {


        return;
    }

    void File_Stopped::PlayPause(bpFSM& context)
    {


        return;
    }

    void File_Stopped::Previous(bpFSM& context)
    {


        return;
    }

    void File_Stopped::Stop(bpFSM& context)
    {


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
