#ifndef _H_BPFSM
#define _H_BPFSM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : bpFSM.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace bestpractice
{
    // Forward declarations.
    class File;
    class File_Paused;
    class File_Playing;
    class File_Stopped;
    class File_Default;
    class BpMainFrameState;
    class bpFSM;
    class BpMainFrame;

    class BpMainFrameState :
        public statemap::State
    {
    public:

        BpMainFrameState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(bpFSM&) {};
        virtual void Exit(bpFSM&) {};

        virtual void Eof(bpFSM& context);
        virtual void NewFile(bpFSM& context, wxString filename);
        virtual void Next(bpFSM& context);
        virtual void PlayPause(bpFSM& context);
        virtual void Previous(bpFSM& context);
        virtual void Stop(bpFSM& context);

    protected:

        virtual void Default(bpFSM& context);
    };

    class File
    {
    public:

        static File_Paused Paused;
        static File_Playing Playing;
        static File_Stopped Stopped;
    };

    class File_Default :
        public BpMainFrameState
    {
    public:

        File_Default(const char *name, int stateId)
        : BpMainFrameState(name, stateId)
        {};

        virtual void Next(bpFSM& context);
        virtual void Previous(bpFSM& context);
        virtual void NewFile(bpFSM& context, wxString filename);
        virtual void Stop(bpFSM& context);
        virtual void Eof(bpFSM& context);
    };

    class File_Paused :
        public File_Default
    {
    public:
        File_Paused(const char *name, int stateId)
        : File_Default(name, stateId)
        {};

        void Entry(bpFSM&);
        void PlayPause(bpFSM& context);
    };

    class File_Playing :
        public File_Default
    {
    public:
        File_Playing(const char *name, int stateId)
        : File_Default(name, stateId)
        {};

        void Entry(bpFSM&);
        void Next(bpFSM& context);
        void PlayPause(bpFSM& context);
        void Previous(bpFSM& context);
    };

    class File_Stopped :
        public File_Default
    {
    public:
        File_Stopped(const char *name, int stateId)
        : File_Default(name, stateId)
        {};

        void Entry(bpFSM&);
        void NewFile(bpFSM& context, wxString filename);
        void Next(bpFSM& context);
        void PlayPause(bpFSM& context);
        void Previous(bpFSM& context);
        void Stop(bpFSM& context);
    };

    class bpFSM :
        public statemap::FSMContext
    {
    public:

        bpFSM(BpMainFrame& owner)
        : FSMContext(File::Stopped),
          _owner(owner)
        {};

        bpFSM(BpMainFrame& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        BpMainFrame& getOwner() const
        {
            return (_owner);
        };

        BpMainFrameState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<BpMainFrameState&>(*_state));
        };

        void Eof()
        {
            (getState()).Eof(*this);
        };

        void NewFile(wxString filename)
        {
            (getState()).NewFile(*this, filename);
        };

        void Next()
        {
            (getState()).Next(*this);
        };

        void PlayPause()
        {
            (getState()).PlayPause(*this);
        };

        void Previous()
        {
            (getState()).Previous(*this);
        };

        void Stop()
        {
            (getState()).Stop(*this);
        };

    private:

        BpMainFrame& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_BPFSM
